#+TITLE: emacs lisp

* 检测 emacs 是在终端下启动还是 GUI 下启动

我一般在终端下使用 emacs，有些配置需要区分 emacs 运行在终端下还是在 GUI 模式下，以便加载不通的配置
可以借助变量 window-system 来实现，其值如下：
- =nil= for a termcap frame (a character-only terminal),
- =‘x’= for an Emacs frame that is really an X window,
- =‘w32’= for an Emacs frame that is a window on MS-Windows display,
- =‘ns’= for an Emacs frame on a GNUstep or Macintosh Cocoa display,
- =‘pc’= for a direct-write MS-DOS frame.

** 例：mac emacs 和系统共享剪切板
问题：mac GUI 模式下已支持该功能。但是终端模式下并不能和系统共享剪切板
思路：借助 shell 命令 =pbpaste= 和 =pbcopy= 来实现
#+BEGIN_SRC emacs-lisp
;; emacs 和系统共享剪切板
(setq select-enable-clipboard t)     ;; 该行是 emacs 默认配置，它仅支持 emacs GUI 模式；emacs -nw 下并不管用，所以需要下面的一些配置
(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))
(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))
(cond ((not window-system)        ;; 终端 emacs 下需要使用 pbpaste 和 pbcopy 来和系统共享剪切板
       (setq interprogram-cut-function 'paste-to-osx
             interprogram-paste-function 'copy-from-osx))
      ((equal window-system 'ns)  ;; GUI emacs 下使用如下 2 个默认值，无需改变即可共享剪切板
       (setq interprogram-cut-function 'gui-select-text
             interprogram-paste-function 'gui-selection-value)))
#+END_SRC

* save-excursion

该函数用于保存当前 buffer 和当前光标位置，执行完其包含的代码段后恢复 buffer 和光标位置
** 例：对齐当前选中的内容或整个 buffer
快捷键 =C-M-\= 默认是调用 indent-region 函数，现将其改为调用函数 indent-region-or-buffer。该函数会判断如果在选中状态，则对齐选中的内容；否则对齐整个 buffer
#+BEGIN_SRC emacs-lisp
(defun indent-buffer()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))    ;; point-min表示buffer开始位置，point-max表示buffer末尾位置

(defun indent-region-or-buffer()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  ;; save-excursion 函数保存当前 buffer 和当前光标位置，执行完其包含的代码段后恢复 buffer 和光标位置
  ;; region-active-p 如果 Transient-Mark Mode 打开，并且 mark 处于激活状态（即处于选中状态下），该函数返回非空
  ;; region-beginning 函数返回选中区域起始位置，region-end 函数返回末尾位置
  (save-excursion
    (if(region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (indent-buffer)
        (message "Indented buffer.")))))

(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)  ;; 改进文本对齐快捷键。该快捷键原先是调用 indent-region
#+END_SRC

** 例：导出笔记
[[./搭建我的笔记系统.org::*后续优化2 —— 生产环境测试环境分离][修复导出笔记前后光标位置改变的问题]]
