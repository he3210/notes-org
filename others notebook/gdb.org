#+TITLE: gdb

* gdb 调试的几种方法
1. gdb binary_executable_file
  #+BEGIN_SRC shell
    $ gdb binary_executable_file
    (gdb) run arg1 arg2 … argN
  #+END_SRC

2. gdb -args binary_executable_file arg1 arg2 ... argN
  #+BEGIN_SRC shell
    $ gdb -args binary_executable_file arg1 arg2 ... argN
    (gdb) run
  #+END_SRC

3. gdb
  #+BEGIN_SRC shell
    $ gdb
    (gdb) file binary_executable_file
    set arg1 arg2 ... argN
    run
  #+END_SRC

* 常用命令
调用 gdb 编译需要在 cc 后面加 -g 参数再加-o；
在 gdb 中如果命令前缀可以唯一确定这条命令，不必写出全部命令，只需写出部分命令即可
如 l 是 list 的前缀，并且在 gdb 中以 l 为开头的命令只有 list，所以可用 l 代替 list，其它命令亦然

#+BEGIN_SRC shell
$ gdb 调试文件
(gdb) l                            # （字母 l）从第一行开始列出 10 行源码
(gdb) break n                      # 在第 n 行处设置断点
(gdb) break func                   # 在函数 func() 的入口处设置断点
(gdb) break test.c:12              # 在文件 test.c 的第 12 行设置断点
(gdb) break test.c:func if i==100  # 在文件 test.c 的 func 函数处设置断点，当 i==100 时在断点出暂停
(gdb) condition 3 i==100           # 在断点 3 处添加条件 i==100，表示当断点 3 处 i==100 时暂停
(gdb) condition 3                  # 取消断点 3 处的条件
(gdb) info break                   # 查看断点信息
(gdb) r                            # 运行程序
(gdb) n                            # 单步执行
(gdb) c                            # 继续运行
(gdb) p 变量                       # 打印变量的值
(gdb) p *arr@10                    # 打印数组 arr 的 10 个元素
(gdb) p func(10)                   # func 是函数，10 是实参，这表示打印函数调用 func(10) 的返回值
(gdb) call func(10)                # 表示调用函数 func(10)
(gdb) ignore 2 5                   # 表示忽略第 2 个断点 5 次，当第 6 次程序运行到断点出才暂停
(gdb) bt                           # 查看函数堆栈
(gdb) where                        # 查看函数堆栈
(gdb) frame 1                      # 表示切换到 3 号堆栈
(gdb) info threads                 # 表示显示所有线程
(gdb) thread 3                     # 切换到 3 号线程，这时可以用 bt/where 显示 3 号线程堆栈
(gdb) finish                       # 退出函数
(gdb) shell 命令行                 # 执行 shell 命令行
(gdb) set var width=5              # 指定运行时的程序的变量值，var 表示 width 是一个程序变量，可以防止 GDB 把 width 误认为是 GDB 保留参数
(gdb) signal SIGUSR1               # 直接向被调试程序发送一个 SIGUSR1 信号，不会被 GDB 截获
(gdb) shell kill -USR1 6631        # 6631 是被调试程序的进程 id，表示向进程 6631 发送一个 SIGUSR1 信号，该信号会被 GDB 截获
(gdb) show args                    # 查看设置好的参数 
(gdb) show paths                   # 查看程序运行路径 
set environment varname [=value]   # 设置环境变量。如：set env USER=hchen
show environment [varname]         # 查看环境变量
(gdb) cd                           # 相当于 shell 的 cd
(gdb) pwd                          # 显示当前所在目录
(gdb) info program                 # 来查看程序的是否在运行，进程号，被暂停的原因
(gdb) clear 行号n或函数名          # 清除第 n 行的断点
(gdb) delete 断点号n               # 删除第 n 个断点
(gdb) display i                    # 动态显示 i 的值，当程序暂停时或单步跟踪时显示 i 的值
(gdb) undisplay 1                  # 删除编号为 1 的动态显示
(gdb) disable 断点号n              # 暂停第 n 个断点
(gdb) enable 断点号n               # 开启第 n 个断点
(gdb) step                         # 单步调试如果有函数调用，则进入函数；与命令 n 不同，n 是不进入调用的函数的
#+END_SRC

- =list= 简记为 l ，其作用就是列出程序的源代码，默认每次显示 10 行。再次使用该命令，会接着上一次 list 命令继续输出下 10 行的内容
- =list 行号= 将显示当前文件以“行号”为中心的前后 10 行代码，如：list 12
- =list 函数名= 将显示“函数名”所在函数的源代码，如：list main

- =run= 简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令
- =回车= 重复上一条命令
- =set args= 设置运行程序时的命令行参数，如：set args 33 55
- =show args= 显示命令行参数
- =continue= 简讯为 c ，其作用是继续运行被断点中断的程序

- =break= 为程序设置断点
- =break 行号= 在当前文件的“行号”处设置断点，如：break  33
- =break 函数名= 在用户定义的函数“函数名”处设置断点，如：break cb_button
- =info breakpoints= 显示当前程序的断点设置情况
- =disable breakpoints Num= 关闭断点“Num”，使其无效，其中“Num”为 info breakpoints 中显示的对应值
- =enable breakpoints Num= 打开断点“Num”，使其重新生效

- =step= 简记为 s ，单步跟踪程序，当遇到函数调用时，则进入此函数体（一般只进入用户自定义函数）
- =next= 简记为 n，单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内
- =until= 当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体
- =finish= 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息
- =stepi= 或 =nexti= 单步跟踪一些机器指令

- =print 表达式= 简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试 C 语言的程序，那么“表达式”可以是任何 C 语言的有效表达式，包括数字，变量甚至是函数调用
- =print a= 将显示整数 a 的值
- =print ++a= 将把 a 中的值加 1,并显示出来
- =print name= 将显示字符串 name 的值
- =print gdb_test(22)= 将以整数 22 作为参数调用 gdb_test() 函数
- =print gdb_test(a)= 将以变量 a 作为参数调用 gdb_test() 函数

- =bt= 显示当前程序的函数调用堆栈
- =display 表达式= 在单步运行时将非常有用，使用 display 命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如：display a
- =watch 表达式= 设置一个监视点，一旦被监视的“表达式”的值改变，gdb 将强行终止正在被调试的程序。另外需要注意的是 watch 命令必须在程序运行的时候（run 命令）才能设置监视点。如： watch a
- =kill= 将强行终止当前正在调试的程序
- =help 命令= help 命令将显示“命令”的常用帮助信息
- =call 函数(参数)= 调用“函数”，并传递“参数”，如：call  gdb_test(55)

- =layout= 用于分割窗口，可以一边查看代码，一边测试
- =layout src= 显示源代码窗口
- =layout asm= 显示反汇编窗口
- =layout regs= 显示源代码/反汇编和 CPU 寄存器窗口
- =layout split= 显示源代码和反汇编窗口

- =Ctrl + L= 刷新窗口
- =quit= 简记为 q ，退出 gdb

* 信号
- =signal SIGXXX= 　　产生 XXX 信号，如 SIGINT。一种速查 Linux 查询信号的方法： =$ kill -l=

- =handle= 在 GDB 中定义一个信号处理。信号可以以 SIG 开头或不以 SIG 开头，可以用定义一个要处理信号的范围（如：SIGIO-SIGKILL，表示处理从 SIGIO 信号到 SIGKILL 的信号，其中包括 SIGIO，SIGIOT，SIGKILL 三个信号），也可以使用关键字 all 来标明要处理所有的信号。一旦被调试的程序接收到信号，运行程序马上会被 GDB 停住，以供调试。其可以是以下三种关键字的一个或多个
 - =nostop/stop= 当被调试的程序收到信号时，GDB 不会停住程序的运行，但会打出消息告诉你收到这种信号/GDB 会停住你的程序
 - =print/noprint= 当被调试的程序收到信号时，GDB 会显示出一条信息/GDB 不会告诉你收到信号的信息
 - =pass(noignore)/nopass(ignore)= pass 表示当被调试的程序收到信号时，GDB 不处理信号。这表示，GDB 会把这个信号交给被调试程序会处理。nopass 表示当被调试的程序收到信号时，GDB 不会让被调试程序来处理这个信号，不会出现上述提示
- =info signals=
- =info handle=
可以查看哪些信号被 GDB 处理，并且可以看到缺省的处理方式

gdb signal 命令和 shell 的 kill 命令不同，kill 命令发信号给被调试程序时，是由 GDB 截获的，而 signal 命令所发出一信号则是直接发给被调试程序的

* gdbserver: 调试远程二进制可执行文件
1. 远程通过 tcp 监听所有网卡的 1234 端口，调试 binary_executable_file
  #+BEGIN_SRC shell
    $ gdbserver 0.0.0.0:1234 binary_executable_file
  #+END_SRC
  - 注意！一定要打开防火墙 tcp 1234 端口
  - gdbserver 不能通过 <C-c> 和 <C-\> 杀死，可以在客户的 gdb 通过命令 quit 或快捷键 <C-d> 退出
2. 本地 gdb 连接 gdbserver 调试远程二进制可执行文件
  #+BEGIN_SRC shell
    $ gdb
    (gdb) target remote langdebuqing.com:1234
  #+END_SRC
3. 本地 clion 远程调试
  1) clion 点击 Edit Configurations，配置 GDB Remote Debug
    #+ATTR_ORG: :width 50%
    #+ATTR_HTML: :width 50%
    [[../images/gdb_gdbserver.png]]
  2) clion 添加断点，点击 Run -> Debug 'gdbserver_vultr'，连接 gdbserver 进行调试
