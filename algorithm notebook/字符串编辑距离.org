#+TITLE: 字符串编辑距离

* 问题

给定一个源串和目标串，能够对串进行如下操作：
- 在给定位置上插入一个字符
- 替换任意字符
- 删除任意字符

写一个程序，返回最小操作数，使得进行这些操作后源串等于目标串，源串和目标串长度都小于2000。

* 分析

增删改的操作数都是1，权值相同，所以不必区分增删改，都是一步操作。
设源串为X，目标串为Y
当 ~X[i] != Y[j]~ 时，有3种可能情况
1. 经过一步操作后，然后再将 X[0, i-1] 和 Y[0, j] 变成相等的字符串
2. 经过一步操作后，然后再将 X[0, i-1] 和 Y[0, j-1] 变成相等的字符串
3. 经过一步操作后，然后再将 X[0, i] 和 Y[0, j-1] 变成相等的字符串

* 状态转移方程

$$
c[i, j]=\left\{
\begin{array}{lcl}
i                              &      & {j = 0}\\
j                              &      & {i = 0}\\
c[i-1, j-1]                    &      & {i, j > 0\ and\ x_i = y_j}\\
min\{c[i, j-1] + 1, c[i-1, j] + 1, c[i-1, j-1] + 1\}  &      & {i, j > 0\ and\ x_i \neq y_j}
\end{array} \right.
$$

设两个字符串是 X 和 Y，
i 为字符串 X 的下标，j 为字符串 Y 的下标
x_{i} 是字符串 X 的第 i 个字符。同理，y_{j} 是字符串 Y 的第 j 个字符
c[i, j] 是 X 的前 i 个字符和 Y 的前 j 个字符的最小编辑距离

* 动态规划

#+BEGIN_SRC C
    int m[2048][2048];
    int fun(const char* X, const char* Y)
    {
        // 异常处理
        if(X == NULL || Y == NULL)
            return 0;
        // 边界初始化
        int len_x = strlen(X);
        int len_y = strlen(Y);
        for(int i = 0; i <= len_x; ++i)
            m[i][0] = i;
        for(int j = 1; j <= len_y; ++j)
            m[0][j] = j;
        // 填表
        for(int i = 1; i <= len_x; ++i)
            for(int j = 1; j <= len_y; ++j)
            {
                if(X[i] == Y[j])
                    m[i][j] = m[i-1][j-1];
                else
                {
                    int min = m[i-1][j] < m[i-1][j-1] ? m[i-1][j] : m[i-1][j-1];
                    min = min < m[i][j-1] ? min : m[i][j-1];
                    m[i][j] = min + 1;
                }
            }
        return m[len_x][len_y];
    }
#+END_SRC

* 备忘录

#+BEGIN_SRC C
    #define INF -1
    int m[2048][2048];
    int fun2_memo(const char* X, const char* Y, int i, int j)
    {
        // 查询子问题的解
        if(m[i][j] != INF)
            return m[i][j];
        // 处理边界
        if(i == 0)
            m[i][j] = j;
        else if(j == 0)
            m[i][j] = i;
        // 填表
        else if(X[i] == Y[j])
            m[i][j] = fun2(X, Y, i-1, j-1);
        else
        {
            int a = fun2(X, Y, i-1, j);
            int b = fun2(X, Y, i-1, j-1);
            int c = fun2(X, Y, i, j-1);
            a = a < b ? a : b;
            a = a < c ? a : c;
            m[i][j] = a + 1;
        }
        return m[i][j];
    }

    int fun2(const char* X, const char* Y)
    {
        int len_x = strlen(X);
        int len_y = strlen(Y);
        // 子问题的解初始化为一个特殊值
        memset(m, INF, sizeof(m));
        return fun2_memo(X, Y, len_x, len_y);
    }
#+END_SRC
