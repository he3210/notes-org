#+TITLE: consistent hashing

* 问题
假设，我们有一个社交网站，使用 4 台 Redis 服务器缓存存储图片路径，存储的格式为键值对，key 为图片名称，value 为该图片所在文件服务器的路径，数据量大概有 2000W 左右，我们需要根据文件名查找该文件所在文件服务器上的路径。

* 2 种解法

1. 把图片资源随机分配到 4 台 Redis 服务器上。如果要查询图片 "a.png" 所在文件服务器的路径，需要遍历这 4 台 Redis 服务器。显然，这不是我们想要的
2. 使用哈希。根据 hash("a.png")%4，在分库的时候将图片存储到指定的 Redis 服务器。查找 "a.png" 时，根据该哈希函数直接定位到某个 Redis 服务器，这样就无需遍历这 4 个 Redis 服务器了。
 然而，当如果 4 台缓存服务器已经不能满足我们的缓存需求，此时增加了一台 Redis 缓存服务器。哈希函数变为 hash("a.png")%5，所有缓存的位置都会发生改变！当应用无法从缓存中获取数据时，会直接向后端数据库请求数据！！！
 同样的，如果 4 台缓存中突然有一台缓存服务器出现了故障，我们则需要将故障机器移除，但是如果移除了一台缓存服务器，那么缓存服务器数量从4台变为3台，也会有同样的问题。

为解决这些问题可使用 consistent hashing

* consistent hashing

类似于上述的解法 2 中哈希函数对缓存服务器数量 4 取模：hash("a.png")%4。
consistent hashing 也是取模的算法，例如，它对 2^{32} 进行取模。它的哈希函数 H 的值空间为 0~2^{32}-1（即哈希值是一个 32 位无符号整型）。
整个哈希环如下：
#+ATTR_ORG: :width 25%
#+ATTR_HTML: :width 25%
[[../images/consistent hashing-1.jpg]]

** 映射服务器结点到哈希环
然后对各个缓存服务器进行一次哈希，具体可以选择服务器的 IP 或主机名作为关键字进行哈希，这样每台缓存服务器在哈希环上都有一个确定的位置。
假设将四台 Redis 服务器使用 IP 地址哈希后在环空间的位置如下：
#+ATTR_ORG: :width 35%
#+ATTR_HTML: :width 35%
[[../images/consistent hashing-2.jpg]]

** 定位数据所在结点
根据哈希函数计算出图片在环上的哈希值，然后沿着此位置顺时针"行走"，直到遇到第一个缓存服务器结点（即找到第一个大于该哈希值的缓存服务器结点，如果没找到使用哈希值最小的缓存服务器结点）。该结点对应的服务器就是图片路径所在的 Redis

例如我们有 Object A、Object B、Object C、Object D 四个数据对象，经过哈希计算后，在环空间上的位置如下：
#+ATTR_ORG: :width 40%
#+ATTR_HTML: :width 40%
[[../images/consistent hashing-3.jpg]]

** 删除结点
假设 Node C 不幸宕机，可以看到此时对象 A、B、D 不会受到影响，只有 C 对象被重定位到 Node D。一般的，在 consistent hashing 算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响，如下所示：
#+ATTR_ORG: :width 40%
#+ATTR_HTML: :width 40%
[[../images/consistent hashing-4.jpg]]

** 增加结点
如果在系统中增加一台服务器 Node X，如下图所示：
#+ATTR_ORG: :width 40%
#+ATTR_HTML: :width 40%
[[../images/consistent hashing-5.jpg]]
此时对象 Object A、B、D 不受影响，只有对象 C 需要重定位到新的 Node X ！一般的，在 consistent hashing 算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。

综上所述，一致性Hash算法对于结点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。

** 解决 hash 环中的数据不平衡问题 —— 虚拟结点
consistent hashing 算法在服务结点太少时，容易因为结点分布不均匀而造成数据不平衡问题，例如系统中只有两台服务器，其环分布如下：
#+ATTR_ORG: :width 25%
#+ATTR_HTML: :width 25%
[[../images/consistent hashing-6.jpg]]
此时大量数据集中到 Node A 上，只有极少量会定位到 Node B 上。为了解决这种数据不平衡问题，consistent hashing 算法引入了虚拟结点，即对每一个服务结点计算多个哈希值。具体做法可以在服务器 IP 或主机名的后面增加编号来实现。

例如上面的情况，可以为每台服务器计算三个虚拟结点，例如可以分别计算 "Node A#1"、"Node A#2"、"Node A#3"、"Node B#1"、"Node B#2"、"Node B#3"的哈希值，于是形成六个虚拟结点：
#+ATTR_ORG: :width 40%
#+ATTR_HTML: :width 40%
[[../images/consistent hashing-7.jpg]]
同时数据定位算法不变，只是多了一步虚拟结点到实际结点的映射，例如定位到 "Node A#1"、"Node A#2"、"Node A#3" 三个虚拟结点的数据均定位到 Node A 上。这样就解决了服务结点少时数据不平衡的问题。在实际应用中，通常将虚拟结点数设置为 32 甚至更大，因此即使很少的服务结点也能做到相对均匀的数据分布。
