#+TITLE: 插入排序

插入排序的基本思想：每次将一个待排序的记录，按其关键字的大小插入到前面已经排好序的子序列中，知道全部记录插入完成。

* 直接插入排序
算法思想：每次将一个待排序的记录，按其关键字的大小插入到前面已经排好序的子序列中，直到全部记录插入完成。

#+BEGIN_SRC c
// 升序
void InsertSort(ElemType A[], int n)
{
    int i, j;
    ElemType x;
    for(i = 1; i < n; ++i)
    {
        x = A[i];
        for(j = i-1; j >= 0 && A[j].key > x.key; --j)
            A[j+1] = A[j];
        A[j+1] = x;
    }
}

// 降序
void InsertSort(ElemType A[], int n)
{
    int i, j;
    ElemType x;
    for(i = 1; i < n; ++i)
    {
        x = A[i];     // x 只是暂存单元，不是哨兵
        for(j = i-1; j >= 0 && A[j].key < x.key; --j)
            A[j+1] = A[j];
        A[j+1] = x;
    }
}
#+END_SRC

直接插入排序总结：
时间复杂度 O(n^{2}) ，空间复杂度 O(1)
在最好的情况下，表中元素已经有序，此时每插入一个元素，都只需比较一次而不用移动元素，因而时间复杂度为 O(n)
稳定性：稳定

* 希尔排序

算法思想：对于序列 {A[0], A[1], ..., A[n]} 分割成形如 {A[i], A[i+d], A[i+2d], ..., A[i+kd]} 的子表，对每个子表进行直接插入排序，当整个表中元素已呈基本有序时，再对全体记录进行一次直接插入排序

#+BEGIN_SRC c
// 升序
void ShellSort(ElemType A[], int n)
{
    int i, j;
    ElemType x;
    for(int dk = n/2; dk >= 1; dk /= 2)  // 步长从 n/2 到 1
    {
        for(i = dk; i < n; ++i)
        {
            x = A[i];     // x暂存当前元素
            for(j = i-dk; j >= 0 && A[j].key > x.key; j -= dk)
                A[j+dk] = A[j];
            A[j+dk] = x;
        }
    }
}
#+END_SRC

希尔排序总结：
时间复杂度：时间复杂度依赖于增量序列的函数，时间复杂度分析比较困难。当 n 在某个特定范围时，希尔排序的时间复杂度约为 O(n^{1.3})，在最坏的情况下希尔排序的时间复杂度是 O(n^{2})
空间复杂度：O(1)
稳定性：不稳定
例如：序列 {3, =2=, 2} ，经过一次希尔排序后，序列为 {2, =2=, 3}，最终序列为 {2, =2=, 3}
