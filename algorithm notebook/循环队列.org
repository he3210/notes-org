#+TITLE: 循环队列

循环队列是把顺序队列首尾相连，把存储队列元素的表从逻辑上看成一个环，成为循环队列
定义 front 指向队首元素，rear 指向队尾元素的下一个位置
初始状态：q.front = q.rear = 0
入队（队尾指针进1）：q.rear = (q.rear+1) % N
出队（队首指针进1）：q.front = (q.front+1) % N
队列长度：(N + q.rear - q.front) % N

* 区分队空队满的三种方法

** 方法一

队满条件：（q.rear+1) % N = q.front
队空条件：q.front = q.rear
这种区分队空队满的方法牺牲了一个存储单元。它约定了"q.front 指针在 q.rear 指针的下一个位置作为队满的标志"

#+BEGIN_SRC C
    #define N 1024
    #define elem_type int

    typedef struct queue
    {
        elem_type data[N];
        int front, rear;
    }queue;

    void init_queue(queue &q)
    {
        q.rear = q.front = 0;
    }

    bool is_empty(queue &q)
    {
        if(q.rear == q.front)
            return true;
        else
            return false;
    }

    bool enqueue(queue &q, elem_type &x)
    {
        if((q.rear+1) % N == q.front)
            return false;
        q.data[q.rear] = x;
        q.rear = (q.rear+1) % N;
        return true;
    }

    bool dequeue(queue &q, elem_type &x)
    {
        if(q.rear == q.front)
            return false;
        x = q.data[q.front];
        q.front = (q.front+1) % N;
        return true;
    }

    int queue_length(queue &q)
    {
        return (N+q.rear-q.front)%N;
    }
#+END_SRC

** 方法二
数据结构中增设表示元素个数的数据成员 q.length。
队空条件：q.length = 0
队满条件：q.length = N

** 方法三
数据结构中增设 q.tag 数据成员，以区分是队空还是队满
若出队导致 q.front = q.rear，则一定会队空，设置 q.tag = 0
若入队导致 q.front = q.rear，则一定会队满，设置 q.tag = 1

#+BEGIN_SRC C
    bool enqueue(queue &q, elem_type &x)
    {
        if(q.front == q.rear && q.tag == 1)
            return false;
        q.data[q.rear] = x;
        q.rear = (q.rear+1) % N;
        q.tag = 1;
        return true;
    }

    bool dequeue(queue &q, elem_type &x)
    {
        if(q.front == q.rear && q.tag == 0)
            return false;
        x = q.data[q.front];
        q.front = (q.front+1) % N;
        q.tag = 0;
        return true;
    }
#+END_SRC
