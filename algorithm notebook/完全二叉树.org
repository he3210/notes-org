#+TITLE: 完全二叉树（Complete Binary Tree）

一个高度为 h，有 n 个结点的二叉树，并且仅当其每一个结点都与高度为 h
的满二叉树中编号为 1～n 的结点一一对应时，称为完全二叉树

* 顺序存储表示完全二叉树

设数组 A[n] 从下标 0 开始存储一棵完全二叉树
A[i]（$0 \leq i < n$）的子结点偏移量为 2*i+1，2*i+2。父结点偏移量为(i-1)/2

* 二叉堆

二叉堆就是一棵完全二叉树。
父结点的键值总是小于（或大于）任何一个子结点的键值，且每个结点的左子树和右子树都是一个二叉堆。
当父结点的键值总是大于或等于任何一个子结点的键值时为最大堆。
当父结点的键值总是小于或等于任何一个子结点的键值时为最小堆。

** 二叉堆应用：堆排

见排序章节-选择排序-堆排

* 完全二叉树应用：多路归并排序-败者树

见排序章节-K路归并排序-败者树

* 判断二叉树是否是完全二叉树

#+BEGIN_SRC C
    // 采用层序遍历算法，将所有结点加入队列（包含空结点）。
    // 当遇到空结点时，查看队列中是否有非空结点。若有，则二叉树不是完全二叉树
    bool IsCompleteBT(BiTree T)
    {
        // 完全二叉树可以是空树
        if(!T)
            return true;
        queue Q;
        init_queue(Q);
        enqueue(Q, T);
        BiTree t;
        while(!is_empty(Q))
        {
            dequeue(Q, t);
            if(t)
            {
                // 左右孩子入队列
                // 与层序遍历函数 LevelOrder 有细微不同
                // 此处，左右孩子结点为 NULL 时依然进队列
                enqueue(Q, t->lchild);
                enqueue(Q, t->rchild);
            }
            // 遇到非空结点，在队列中查找是否存在非空结点
            else
            {
                while(!is_empty(Q))
                {
                    dequeue(Q, t);
                    if(t)
                        return false;
                }
            }
        }
        return true;
    }
#+END_SRC
