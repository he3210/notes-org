#+TITLE: sed

* 参考
- 《Linux命令行与shell脚本编程大全（第三版）》

* sed 编辑器处理流程
sed 作为流编辑器，它的一次数据处理流程如下：
1. 从输入中读取一行数据
2. 根据所提供的编辑命令匹配数据
3. 按照命令修改流中的数据
4. 将处理过的该行内容输出到 stdout（如果该行没有匹配的数据，就会把原先的内容输出到 stdout）
处理完毕后，它会重复这个过程继续处理下一行数据

* 语法
=$ sed options script file=
options 有：
- =-e=      在 sed 命令行执行多个命令
- =-f=      指定 sed 脚本文件
- =-i extension= 备份源文件到其它文件，然后 sed 编辑器直接修改源文件。用法见下面
- =-n=      禁止 sed 编辑器产生 stdout 输出。此时可使用 flags -p 来进行输出

* 替换行
** script 语法
=s/pattern/replacement/flags=
替换标记 flags 有 4 个：
- =数字=     替换 **每行中的** 第几处模式匹配的地方。不能和 =g= 一起使用
- =g=        替换匹配的所有文本
- =p=        输出替换过的行到 stdout
- =w file=   将替换的结果写入文件，只保存替换过的行
这些 flags 针对的是匹配到的行
** 示例

#+BEGIN_SRC shell
$ sed 's/test/test project/' test.txt        # 把 test 替换成 test project，默认替换所有匹配项。会把替换后的完整文本内容输出到 stdout
$ sed -n 's/test/test project/p' test.txt    # -n 和 p 标志常在一起配合使用。首先 -n 禁止 sed 产生 stdout 输出，然后 p 标志把修改过的行输出到 stdout
$ sed -n 's/test/test project/2w aaa.txt' test.txt  # 把文本 test.txt 中每行的第二个 "test" 替换成 "test project"，然后仅把替换过的行写入 aaa.txt
$ echo "/bin/bash" | sed 's!/bin/bash!/bin/csh!'    # 使用其它任意字符代替 / ，只要它没在 pattern 中。这里使用符号 ! 代替 /，把 /bin/bash 替换成 /bin/csh
$ sed -e 's/^How/You/; s/you$/right/' test.txt      # 使用多个 sed 命令

# 指定 sed 脚本文件
$ cat test.sed
s/^this/This/
s/lines$/line/
$ sed -f test.sed test.txt    # -f 指定 sed 脚本文件

# 先把文件 style.css 备份到 style.css_bak，然后 sed 命令直接替换源文件 style.css。
# -i '_bak' 指定备份文件后缀，先备份原文件到指定文件，然后 sed 会直接替换源文件。-i '' 表示不备份
$ sed -i '_bak' 's!color!dddd!g' style.css

# 数字形式的行寻址
$ sed -n '4s/test/test project/p' test.txt      # sed 编辑器只修改第 4 行文本
$ sed -n '4,6s/test/test project/p' test.txt    # sed 编辑器修改从第 4 行到第 6 行的文本
$ sed -n '4,$s/test/test project/p' test.txt    # 修改从第 4 行开始的所有行。$ 当然是正则中的行尾符了

# 使用正则进行文本过滤的寻址方式
$ sed -n '/^this/s/test/test project/p' aaa     # 过滤以 "this" 开头的行，然后 sed 对其进行操作
#+END_SRC


* 删除行

#+BEGIN_SRC shell
$ sed 'd' test.txt  # 删除所有行
$ sed '3d' test.txt # 删除第三行
$ sed '/^This/d' test.txt  # 删除以 This 开头的所有行

$ cat test.txt
1. This is first line.
2. This is second line.
3. This is third line.
4. This is first line again.
5. This is the last line in the file.
# first 匹配第 1 行和第 4 行，second 匹配到第 2 行。首先从第 1 行删除开始，一直删除到第 2 行；然后从第 4 行开始删除，之后的行中没有 second，所以一直删除到最后
$ sed '/first/,/second/d' test.txt
3. This is third line.
#+END_SRC

* TODO 插入和附加
* TODO 修改整行
* TODO 转换单个字符
* TODO 打印
* TODO 写入文件、读取文件
